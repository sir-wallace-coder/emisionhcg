// üöÄ SELLADO CFDI - VERSI√ìN CORREGIDA SIN ERRORES DE SINTAXIS
console.log('üîç SELLADO: Iniciando carga de m√≥dulos...');

const { supabase } = require('./config/supabase');
const jwt = require('jsonwebtoken');
// const { sellarCFDIConNodeCfdi } = require('./utils/nodecfdi-sealer'); // ‚ö†Ô∏è DESACTIVADO TEMPORALMENTE
const { sellarConServicioExterno } = require('./utils/external-sealer-client');
const FormData = require('form-data');
// node-fetch es ES module, se carga din√°micamente
let fetch;

/**
 * Carga din√°micamente node-fetch (ES module)
 * @returns {Promise<Function>} fetch function
 */
async function loadFetch() {
    if (!fetch) {
        const { default: nodeFetch } = await import('node-fetch');
        fetch = nodeFetch;
    }
    return fetch;
}

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';
const SELLADO_EXTERNO_URL = 'https://consulta.click/api/v1/sellado';
const SELLADO_EXTERNO_TOKEN = process.env.SELLADO_EXTERNO_TOKEN; // Token obtenido del login

console.log('‚úÖ SELLADO: Todos los m√≥dulos cargados correctamente');

// ‚úÖ FUNCI√ìN sellarCFDIExterno ELIMINADA - Ahora se usa external-sealer-client.js con autenticaci√≥n autom√°tica

exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'M√©todo no permitido' })
    };
  }

  try {
    console.log('üöÄ SELLADO ENDPOINT: Iniciando handler...');
    
    // Verificar autenticaci√≥n
    const authHeader = event.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return {
        statusCode: 401,
        headers,
        body: JSON.stringify({ error: 'Token de autenticaci√≥n requerido' })
      };
    }

    const token = authHeader.substring(7);
    let decodedToken;
    
    try {
      decodedToken = jwt.verify(token, JWT_SECRET);
    } catch (jwtError) {
      console.error('‚ùå SELLADO: Error verificando JWT:', jwtError.message);
      return {
        statusCode: 401,
        headers,
        body: JSON.stringify({ error: 'Token inv√°lido' })
      };
    }

    const userId = decodedToken.userId;
    console.log('‚úÖ SELLADO: Usuario autenticado:', userId);

    // Parsear datos del request
    let requestData;
    try {
      requestData = JSON.parse(event.body);
    } catch (parseError) {
      console.error('‚ùå SELLADO: Error parseando body:', parseError.message);
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'JSON inv√°lido en el body' })
      };
    }

    const { xmlContent, emisorId, version } = requestData;

    if (!xmlContent || !emisorId || !version) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          error: 'Faltan campos requeridos: xmlContent, emisorId, version' 
        })
      };
    }

    console.log('üìã SELLADO: Datos recibidos:', {
      xmlLength: xmlContent.length,
      emisorId,
      version,
      userId
    });

    // Obtener datos del emisor (acceso global - cualquier emisor)
    console.log('üîç SELLADO: Obteniendo datos del emisor (acceso global)...');
    const { data: emisor, error: emisorError } = await supabase
      .from('emisores')
      .select('*')
      .eq('id', emisorId)
      .single();

    if (emisorError || !emisor) {
      console.error('‚ùå SELLADO: Error obteniendo emisor:', emisorError);
      return {
        statusCode: 404,
        headers,
        body: JSON.stringify({ error: 'Emisor no encontrado' })
      };
    }

    console.log('‚úÖ SELLADO: Emisor encontrado:', {
      rfc: emisor.rfc,
      nombre: emisor.nombre,
      numero_certificado: emisor.numero_certificado
    });

    // Verificar que el emisor tenga certificados
    if (!emisor.certificado_cer || !emisor.certificado_key || !emisor.password_key) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          error: 'El emisor no tiene certificados CSD configurados' 
        })
      };
    }

    // üöÄ SELLADO: USANDO SOLO ENDPOINT EXTERNO CON AUTENTICACI√ìN AUTOM√ÅTICA
    console.log('üåê SELLADO: Usando EXCLUSIVAMENTE servicio externo consulta.click...');
    console.log('üîó SELLADO: Endpoint con autenticaci√≥n autom√°tica');
    console.log('‚ö†Ô∏è SELLADO: NodeCFDI desactivado temporalmente por solicitud del usuario');
    
    let resultado;
    
    try {
      console.log('üîê SELLADO EXTERNO: Iniciando sellado con autenticaci√≥n autom√°tica...');
      
      // Usar cliente externo que maneja login autom√°tico
      const resultadoExterno = await sellarConServicioExterno({
        xmlSinSellar: xmlContent,
        certificadoBase64: emisor.certificado_cer,
        llavePrivadaBase64: emisor.certificado_key,
        passwordLlave: emisor.password_key,
        rfc: emisor.rfc,
        versionCfdi: version || '4.0'
      });
      
      console.log('‚úÖ SELLADO EXTERNO: Respuesta recibida:', {
        exito: resultadoExterno.exito,
        tieneXmlSellado: !!resultadoExterno.xmlSellado,
        longitudXml: resultadoExterno.xmlSellado?.length || 0
      });
      
      // Adaptar respuesta del cliente externo al formato esperado
      resultado = {
        exito: resultadoExterno.exito,
        xmlSellado: resultadoExterno.xmlSellado,
        sello: resultadoExterno.sello,
        cadenaOriginal: resultadoExterno.cadenaOriginal,
        numeroCertificado: resultadoExterno.numeroCertificado || emisor.numero_certificado,
        selloValido: resultadoExterno.selloValido,
        implementacion: 'Servicio externo consulta.click con autenticaci√≥n autom√°tica'
      };
      
    } catch (errorExterno) {
      console.error('‚ùå SELLADO EXTERNO: Error en servicio externo:', errorExterno.message);
      console.error('‚ùå SELLADO EXTERNO: Stack:', errorExterno.stack);
      
      // NO HAY FALLBACK - Solo endpoint externo
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ 
          error: 'Error en servicio externo de sellado: ' + errorExterno.message,
          detalles: 'NodeCFDI desactivado temporalmente. Solo se usa endpoint externo con autenticaci√≥n autom√°tica.'
        })
      };
    }
    
    if (!resultado || !resultado.exito) {
      console.error('‚ùå SELLADO: Error durante el sellado:', resultado?.error);
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({
          exito: false,
          error: 'Error en sellado: ' + (resultado?.error || 'Error desconocido')
        })
      };
    }

    console.log('‚úÖ SELLADO: Completado exitosamente');
    console.log('üìä SELLADO: Sello generado:', resultado.sello ? 'S√ç' : 'NO');
    console.log('üìä SELLADO: Certificado:', resultado.numeroCertificado ? 'S√ç' : 'NO');
    console.log('üìä SELLADO: Implementaci√≥n:', resultado.implementacion || 'NodeCFDI oficial');
    
    // Responder con el XML sellado y metadata
    const respuesta = {
      message: `CFDI sellado exitosamente con ${resultado.implementacion || 'NodeCFDI oficial'}`,
      exito: true,
      xmlSellado: resultado.xmlSellado,
      selloDigital: resultado.sello,
      cadenaOriginal: resultado.cadenaOriginal,
      selloValido: resultado.selloValido,
      numeroCertificado: resultado.numeroCertificado,
      metadata: {
        version: version,
        fechaSellado: new Date().toISOString(),
        longitudXmlOriginal: xmlContent.length,
        longitudXmlSellado: resultado.xmlSellado ? resultado.xmlSellado.length : 0,
        longitudSello: resultado.sello ? resultado.sello.length : 0,
        longitudCadenaOriginal: resultado.cadenaOriginal ? resultado.cadenaOriginal.length : 0,
        implementacion: resultado.implementacion || 'NodeCFDI oficial (compatible llaves SAT)',
        metodoSellado: usarSelladorExterno ? 'Servicio externo' : 'NodeCFDI local'
      },
      emisor: {
        rfc: emisor.rfc,
        nombre: emisor.nombre,
        vigencia_hasta: emisor.vigencia_hasta,
        numero_certificado: emisor.numero_certificado
      }
    };

    console.log('üì§ SELLADO: Enviando respuesta exitosa');
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify(respuesta)
    };

  } catch (error) {
    console.error('‚ùå SELLADO ENDPOINT: Error general:', error);
    console.error('‚ùå SELLADO ENDPOINT: Stack trace:', error.stack);
    
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        error: 'Error interno del servidor: ' + error.message,
        tipo_error: 'GeneralError',
        timestamp: new Date().toISOString()
      })
    };
  }
};
